package com.example.graffiti;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import android.app.ActionBar.LayoutParams;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.hardware.Camera;
import android.hardware.Camera.PictureCallback;
import android.media.CamcorderProfile;
import android.media.MediaRecorder;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.v7.app.ActionBarActivity;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.Toast;

public class MainActivity extends ActionBarActivity {
	
	  // Use constants above API 11 (MediaStore.Files.FileColumns)
	  protected static final int MEDIA_TYPE_IMAGE = 0;
	  protected static final int MEDIA_TYPE_VIDEO = 1;
	  private static final int CAPTURE_IMAGE_ACTIVITY_REQ = 100;
	  private static final String TAG = "MCAct";

	  private Uri fileUri;
	  private Camera camera;
	  private CameraPreview preview;
	  private MediaRecorder mr;
	  private Button videoButton;
	  protected boolean isRecording = false;
	
	private static final String TAG1 = "MyActivity";

	
	  @Override
	  public void onCreate(Bundle savedInstanceState) {
	    super.onCreate(savedInstanceState);
	    if (!checkCameraExists(this)) {
	      Toast.makeText(this, "Sorry: you have no camera!", Toast.LENGTH_LONG);
	      finish();
	    }
	    camera = getCameraInstance();
	    setUpLayout();
	  }
	  
	// Method required if setting up an Intent button 
	  // to call the built-in camera
	  protected void onActivityResult(int requestCode, int resultCode, 
	                                  Intent data) {
	    if (requestCode == CAPTURE_IMAGE_ACTIVITY_REQ) {
	      if (resultCode == RESULT_OK) {
	        if (data == null) {
	          // A known bug here! The image should have saved in fileUri
	          Toast.makeText(this, "Image saved successfully", 
	                         Toast.LENGTH_LONG).show();
	        } else {
	          Toast.makeText(this, "Image saved successfully in: " 
	                         + data.getData(), Toast.LENGTH_LONG).show();
	        }
	      } else if (resultCode == RESULT_CANCELED) {
	        // User cancelled the operation; do nothing
	      } else {
	        Toast.makeText(this, "Callout for image capture failed!", 
	                       Toast.LENGTH_LONG).show();
	      }
	    }
	  }

	  protected void onPause() {
	    releaseMediaRecorder();
	    releaseCamera();
	    super.onPause();
	  }

	  protected void onResume() {
	    if (camera == null) {
	      camera = getCameraInstance();
	      setUpLayout();
	    }
	    super.onResume();
	  }

	  protected Uri getOutputMediaFileUri(int type) {
	    return Uri.fromFile(getOutputMediaFile(type));
	  }

	  
	  protected boolean prepareForVideoRecording() {
	    camera.unlock();
	    mr = new MediaRecorder();
	    mr.setCamera(camera);
	    mr.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
	    mr.setVideoSource(MediaRecorder.VideoSource.CAMERA);
	    mr.setProfile(CamcorderProfile.get(CamcorderProfile.QUALITY_HIGH));
	    mr.setOutputFile(getOutputMediaFile(MEDIA_TYPE_VIDEO).toString());
	    mr.setPreviewDisplay(preview.getHolder().getSurface());
	    try {
	      mr.prepare();
	    } catch (IllegalStateException e) {
	      Log.e(TAG, "IllegalStateException when preparing MediaRecorder " 
	            + e.getMessage());
	      e.getStackTrace();
	      releaseMediaRecorder();
	      return false;
	    } catch (IOException e) {
	      Log.e(TAG, "IllegalStateException when preparing MediaRecorder " 
	            + e.getMessage());
	      e.getStackTrace();
	      releaseMediaRecorder();
	      return false;
	    }
	    return true;
	  }

	  private boolean checkCameraExists(Context c) {
	    if (c.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA)) {
	      return true;
	    } else {
	      return false;
	    }
	  }

	  private Camera getCameraInstance() {
	    Camera c = null;
	    try {
	      c = Camera.open();
	    } catch (Exception e) {
	      Log.e(TAG, "No camera: exception " + e.getMessage());
	      e.getStackTrace();
	      Toast.makeText(this, "Sorry: I can't get a camera!", Toast.LENGTH_LONG);
	      finish();
	    }
	    return c;
	  }

	  private void getImage() {
	    PictureCallback picture = new PictureCallback() {
	      public void onPictureTaken(byte[] data, Camera cam) {
	        new SaveImageTask().execute(data);
	        camera.startPreview();
	      }
	    };
	    camera.takePicture(null, null, picture);
	    
	  }

	  private File getOutputMediaFile(int type) {
	    // good location for shared pictures; will not be lost if app uninstalled
	    File directory = new File(Environment.getExternalStoragePublicDirectory(
	      Environment.DIRECTORY_PICTURES), getPackageName());
	    if (!directory.exists()) {
	      if (!directory.mkdirs()) {
	        Log.e(TAG, "Failed to create storage directory.");
	        return null;
	      }
	    }
	    String timeStamp = new SimpleDateFormat("yyyMMdd_HHmmss")
	                       .format(new Date());
	    File file;
	    if (type == MEDIA_TYPE_IMAGE) {
	      file = new File(directory.getPath() + File.separator + "IMG_" 
	                    + timeStamp + ".jpg");
	    } else if (type == MEDIA_TYPE_VIDEO) {
	      file = new File(directory.getPath() + File.separator + "VID_" 
	                      + timeStamp + ".mp4");
	    } else {
	      return null;
	    }
	    return file;
	  }

	  private void releaseCamera() {
	    if (camera != null) {
	      camera.stopPreview();
	      camera.release();
	      camera = null;
	      preview = null;
	    }
	  }
	  
	  private void releaseMediaRecorder() {
	    if (mr != null) {
	      mr.reset();
	      mr.release();
	      mr = null;
	      camera.lock();
	    }
	  }

	  private void setUpLayout() {
	    setContentView(R.layout.activity_main);
	    preview = new CameraPreview(this, camera);
	    FrameLayout frame = (FrameLayout) findViewById(R.id.camera_preview);
	    frame.addView(preview);

	    Button captureButton = (Button) findViewById(R.id.button_capture);
	    captureButton.setOnClickListener(
	       new View.OnClickListener() {
	       public void onClick(View v) {
	        getImage();
	      }
	      }
	    );
	    setUpFlashButton();
	    setUpIntentButton();
	    setUpVideoButton();
	  }

	  private void setUpFlashButton() {
	    final Camera.Parameters params = camera.getParameters();
	    final List<String> flashList = params.getSupportedFlashModes();
	    if (flashList == null) {
	      // no flash!
	      return;
	    }
	    final CharSequence[] flashCS = flashList.toArray(
	                                   new CharSequence[flashList.size()]);
	    AlertDialog.Builder builder = new AlertDialog.Builder(this);
	    builder.setTitle("Choose flash type");
	    builder.setSingleChoiceItems(flashCS, -1, 
	                                 new DialogInterface.OnClickListener() {
	      public void onClick(DialogInterface dialog, int which) {
	        params.setFlashMode(flashList.get(which));
	        camera.setParameters(params);
	        Toast.makeText(getApplicationContext(), params.getFlashMode(), 
	                       Toast.LENGTH_SHORT).show();
	        dialog.dismiss();
	      }
	    });
	    final AlertDialog alert = builder.create();

	    Button flashButton = new Button(this);
	    setUpButton(flashButton, "flash");
	    flashButton.setOnClickListener(
	      new View.OnClickListener() {
	         public void onClick(View v) {
	          alert.show();
	        }
	      }
	    );
	  }

	  private void setUpIntentButton() {
	    Button intentButton = new Button(this);
	    setUpButton(intentButton, "Open built-in camera app");
	    intentButton.setOnClickListener(
	      new View.OnClickListener() {
	        public void onClick(View v) {
	          Intent i = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
	          fileUri = getOutputMediaFileUri(MEDIA_TYPE_IMAGE);
	          Log.v(TAG, "fileUri: " + fileUri);
	          i.putExtra(MediaStore.EXTRA_OUTPUT, fileUri);
	          startActivityForResult(i, CAPTURE_IMAGE_ACTIVITY_REQ);
	      }
	      }
	    );  
	  }

	  private void setUpVideoButton() {
	    videoButton = new Button(this);
	    setUpButton(videoButton, "Start video");

	    videoButton.setOnClickListener(
	      new View.OnClickListener() {
	        public void onClick(View v) {
	          if (isRecording) {
	            mr.stop();
	            releaseMediaRecorder();
	            camera.lock();
	            videoButton.setText("Start video");
	            isRecording = false;
	          } else {
	            if (prepareForVideoRecording()) {
	              mr.start();
	              videoButton.setText("Stop video");
	              isRecording = true;
	            } else {
	              // Something has gone wrong! Release the camera
	              releaseMediaRecorder();
	              Toast.makeText(MyCameraActivity.this, 
	                             "Sorry: couldn't start video", 
	                             Toast.LENGTH_LONG).show();
	            }
	          }
	        }
	      }
	    );  
	  }
	  
	  private void setUpButton(Button button, String label) {
	    LinearLayout lin = (LinearLayout) findViewById(R.id.buttonlayout);
	    button.setText(label);
	    button.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, 
	                 LayoutParams.WRAP_CONTENT));
	    lin.addView(button);    
	  }

	  
	  
	  class SaveImageTask extends AsyncTask<byte[], String, String> {
	    @Override
	    protected String doInBackground(byte[]... data) {
	    File picFile = getOutputMediaFile(MEDIA_TYPE_IMAGE);
	    if (picFile == null) {
	      Log.e(TAG, "Error creating media file; are storage permissions correct?");
	      return null;
	    }
	    try {
	      FileOutputStream fos = new FileOutputStream(picFile);
	      fos.write(data[0]);
	      fos.close();
	    } catch (FileNotFoundException e) {
	      Log.e(TAG, "File not found: " + e.getMessage());
	      e.getStackTrace();
	    } catch (IOException e) {
	      Log.e(TAG, "I/O error with file: " + e.getMessage());
	      e.getStackTrace();
	    }
	    
	    return null;
	     }
	  }

//	@Override
//	public boolean onCreateOptionsMenu(Menu menu) {
//
//		// Inflate the menu; this adds items to the action bar if it is present.
//		getMenuInflater().inflate(R.menu.main, menu);
//		return true;
//	}
//
//	@Override
//	public boolean onOptionsItemSelected(MenuItem item) {
//		// Handle action bar item clicks here. The action bar will
//		// automatically handle clicks on the Home/Up button, so long
//		// as you specify a parent activity in AndroidManifest.xml.
//		int id = item.getItemId();
//		if (id == R.id.action_settings) {
//			return true;
//		}
//		return super.onOptionsItemSelected(item);
//	}
//
//	/**
//	 * A placeholder fragment containing a simple view.
//	 */
//	public static class PlaceholderFragment extends Fragment {
//		
//		public PlaceholderFragment() {
//		}
//
//		@Override
//		public View onCreateView(LayoutInflater inflater, ViewGroup container,
//				Bundle savedInstanceState) {
//			View rootView = inflater.inflate(R.layout.fragment_main, container,
//					false);
//			return rootView;
//		}
//	}
//
//	/**
//	 * Camera Code
//	 * 
//	 */
//	/** Check if this device has a camera */
//	private boolean checkCameraHardware(Context context) {
//		if (context.getPackageManager().hasSystemFeature(
//				PackageManager.FEATURE_CAMERA)) {
//			// this device has a camera
//			return true;
//		} else {
//			// no camera on this device
//
//			return false;
//		}
//	}
//
//	/** A safe way to get an instance of the Camera object. */
//	public static Camera getCameraInstance() {
//		Camera c = null;
//
//		try {
//			c = Camera.open(); // attempt to get a Camera instance
//			Log.v("HERE", "HERE");
//		} catch (Exception e) {
//			// Camera is not available (in use or does not exist)
//			Log.e("HERE", "HERE");
//		}
//		return c; // returns null if camera is unavailable
//	}
//
//	/** A basic Camera preview class */
//	public class CameraPreview extends SurfaceView implements
//			SurfaceHolder.Callback {
//		private SurfaceHolder mHolder;
//		private Camera mCamera;
//
//		public CameraPreview(Context context, Camera camera) {
//			super(context);
//			mCamera = camera;
//
//			// Install a SurfaceHolder.Callback so we get notified when the
//			// underlying surface is created and destroyed.
//			mHolder = getHolder();
//			mHolder.addCallback(this);
//
//			// deprecated setting, but required on Android versions prior to 3.0
//			if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB)
//				mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
//
//		}
//
//		public void surfaceCreated(SurfaceHolder holder) {
//			// The Surface has been created, now tell the camera where to draw
//			// the preview.
//			try {
//				mCamera.setPreviewDisplay(holder);
//				mCamera.startPreview();
//			} catch (IOException e) {
//				Log.d(TAG, "Error setting camera preview: " + e.getMessage());
//			}
//		}
//
//		public void surfaceDestroyed(SurfaceHolder holder) {
//			// empty. Take care of releasing the Camera preview in your
//			// activity.
//		}
//
//		public void surfaceChanged(SurfaceHolder holder, int format, int w,
//				int h) {
//			// If your preview can change or rotate, take care of those events
//			// here.
//			// Make sure to stop the preview before resizing or reformatting it.
//
//			if (mHolder.getSurface() == null) {
//				// preview surface does not exist
//				return;
//			}
//
//			// stop preview before making changes
//			try {
//				mCamera.stopPreview();
//			} catch (Exception e) {
//				// ignore: tried to stop a non-existent preview
//			}
//
//			// set preview size and make any resize, rotate or
//			// reformatting changes here
//
//			// start preview with new settings
//			try {
//				mCamera.setPreviewDisplay(mHolder);
//				mCamera.startPreview();
//
//			} catch (Exception e) {
//				Log.d(TAG, "Error starting camera preview: " + e.getMessage());
//			}
//		}
//
//		public class CameraActivity extends Activity {
//
//			private Camera mCamera;
//			private CameraPreview mPreview;
//
//			@Override
//			public void onCreate(Bundle savedInstanceState) {
//				super.onCreate(savedInstanceState);
//				setContentView(R.layout.activity_main);
//
//				// Create an instance of Camera
//				mCamera = getCameraInstance();
//
//				// Create our Preview view and set it as the content of our
//				// activity.
//				mPreview = new CameraPreview(this, mCamera);
//				FrameLayout preview = (FrameLayout) findViewById(R.id.camera_preview);
//				preview.addView(mPreview);
//			}
//		}
	}

}
